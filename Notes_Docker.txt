############################### Notes For Docker ###############################



# All the following is using Linux Terminal

While running the docker build / run command an error pops ups

Error = docker: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Head "http://%2Fvar%2Frun%2Fdocker.sock/_ping": dial unix /var/run/docker.sock: connect: permission denied.


Solution = 

Step 1 - run in terminal = grep docker /etc/group
if the result is sililar to "docker:x:138:" this means user is no added to docker group
Add user = sudo usermod -aG docker sam         (sam = user name)
then run command = id sam      (to check the user added status)
again run command = grep docker /etc/group
in results you will find = docker:x:138:sam    (here the user is added to the docker group)
also run = ls -l /var/run/docker.sock
results should be = srw-rw---- 1 root docker 0 Jun 16 16:49 /var/run/docker.sock


###### Now if you run or build your docker image another error pops out


Error : ERROR: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Head "http://%2Fvar%2Frun%2Fdocker.sock/_ping": dial unix /var/run/docker.sock: connect: permission denied

Solution = 

Step 2 - run the following command, replace sam whith you user name = sudo chown sam /var/run/docker.sock

Step 3 - lastly run command = sudo systemctl restart docker


# Docker Processes
1 -  Build an Image = docker build -t first_ubuntu_image .    (-t = name tag & '.' = file present in this current folder)
2 - Contanerising Image/run = docker run -it -p 9000:9000 first_ubuntu_image
3 - Creat your account on docker hub and creat a repo, copy the name given for the image 
4 - creat an image of the name provided
5 - login to docker in terminal using 'docker login'
6 - docker push xyz(name of the  image coppied)
7 - 


# Details

1 - docker container ls = list all running containers
2 - docker container ls -a = list all running containers and stoped as well
3 - docker start or stop xyz(container name) 
4 - -it(flag) = stands for interactive, connect but donot exit 
5 - docker images ls = list all running images
6 - -p(flag) = stands for port maping, eg :- docker run -it -p 2020:2020 (here container port is should run on our machine local host port)


# Volume

Problem : Once your container is deleted the data in it is gone as well. To solve this docker Volume is used where we mout our data on the container.
Here the data is on our machine and it is in sync with the docker container. In a case of container lost/deleted we have our data stored on our local machine.

1 - create a code or data file
2 - run a node image (to install node)
3 - type command = docker run -it -v /local/folder/adress:/in/container/address node bash ---- here -v is for volume & node is the image we want to   run and lastly 'bash' this means open a bash terminal in the container
4 - to check that both are connected we run 'npm install -g(globally) nodemon'(a utility that helps in automatically restarting your 
Node.js application when it detects changes in the source files)
5 - run 'nodemon xyz.js(file name)'
6 - try and edit the file on your local machine and you see the container refreshes automatically




# Networking




